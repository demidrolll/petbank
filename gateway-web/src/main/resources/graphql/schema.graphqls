scalar Date
scalar Long

type Query {
    getClientById(request: GetClientByIdRequest!): GetClientByIdResponse
}

input GetClientByIdRequest {
    id: Long
}

type GetClientByIdResponse {
    result: Result!
    data: GetClientByIdData
}

type GetClientByIdData {
    firstName: String
    lastName: String
    middleName: String
}

type Mutation {
    createClient(request: CreateClientRequest!): CreateClientResponse
    login(request: LoginRequest!): LoginResponse
}

input LoginRequest {
    userId: Long
}

type LoginResponse {
    sessionId: String
}

input CreateClientRequest {
    firstName: String!
    lastName: String!
    middleName: String
    sex: Sex!
    birthDate: Date!
}

type CreateClientResponse {
    result: Result
}

enum Result {
    SUCCESS
    FAIL
    NO_DATA
}

enum Sex {
    MAN
    WOMAN
    OTHER
}
